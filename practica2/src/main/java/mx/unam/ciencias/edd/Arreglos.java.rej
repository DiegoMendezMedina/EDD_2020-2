--- src/main/java/mx/unam/ciencias/edd/Arreglos.java
+++ src/main/java/mx/unam/ciencias/edd/Arreglos.java
@@ -19,8 +19,38 @@ public class Arreglos {
     public static <T> void
     quickSort(T[] arreglo, Comparator<T> comparador) {
         // Aquí va su código.
+	if(arreglo.length>0)
+	    quickSort(arreglo,comparador,0,arreglo.length-1);
     }
-
+    /**
+     *Metodo Auxiliar de QuickSort
+     *Recursivo
+     *a, indice menor
+     *b, indice mayor
+     */
+    private static <T> void quickSort(T[] A,Comparator<T> c,int a, int b ){
+	if(b<=a){
+	    return;
+	}
+	int i=a+1;
+	int j=b;
+	while(i<j){
+	    if(c.compare(A[a],A[i])<0 && c.compare(A[j],A[a])<=0){
+		intercambia(A,i++,j--);
+	    }else if(c.compare(A[i],A[a])<=0){
+		i++;
+	    }else{
+		j--;
+	    }
+	}
+	if(c.compare(A[a],A[i])<0){
+		i--;
+	    }
+	    intercambia(A,i,a);
+	    quickSort(A,c,a,i-1);
+	    quickSort(A,c,i+1,b);
+    }
+	    
     /**
      * Ordena el arreglo recibido usando QickSort.
      * @param <T> tipo del que puede ser el arreglo.
@@ -40,8 +70,25 @@ public class Arreglos {
     public static <T> void
     selectionSort(T[] arreglo, Comparator<T> comparador) {
         // Aquí va su código.
+	for(int i=0;i<arreglo.length-1;i++){
+	    int m=i;
+	    for(int j=i+1;j<arreglo.length;j++)
+		if(comparador.compare(arreglo[j],arreglo[m])<0)
+		    m=j;		
+	    intercambia(arreglo,i,m);
+	}
+    }
+    /**
+     *Intercambia dos elementos en un arreglo
+     *@param arreglo , arreglo donde se haran los cambios
+     *@param i, primer indice
+     *@param m, segundo indice
+     */
+    private static <T> void intercambia(T[] arreglo, int i, int m){
+	T aux=arreglo[m];
+	arreglo[m]=arreglo[i];
+	arreglo[i]=aux;
     }
-
     /**
      * Ordena el arreglo recibido usando SelectionSort.
      * @param <T> tipo del que puede ser el arreglo.
@@ -64,8 +111,22 @@ public class Arreglos {
     public static <T> int
     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
         // Aquí va su código.
+	return busquedaBinaria(arreglo,comparador,elemento,0,arreglo.length-1);
+    }
+    /**
+     *Metodo recursivo auxiliar busquedaBinaria
+     */
+    private static <T> int busquedaBinaria(T[] A, Comparator<T> c,T e, int a, int b){
+	if(a==b){
+	    if(c.compare(A[a],e)==0)
+		return a;
+	return -1;
+	}
+	int m=a+((int)(b-a)/2);
+	if(c.compare(e,A[m])<=0)
+	    return busquedaBinaria(A,c,e,a,m);       
+	return busquedaBinaria(A,c,e,m+1,b);       
     }
-
     /**
      * Hace una búsqueda binaria del elemento en el arreglo. Regresa el índice
      * del elemento en el arreglo, o -1 si no se encuentra.
